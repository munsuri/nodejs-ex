{"version":3,"sources":["meteor://ðŸ’»app/imports/api/tasks.js","meteor://ðŸ’»app/server/main.js"],"names":["module","export","Tasks","Meteor","importSync","v","Mongo","check","Collection","isServer","publish","tasksPublication","find","$or","$ne","owner","userId","methods","text","String","meteorUser","users","findOne","meteorUsername","username","insert","createdAt","Date","taskId","task","private","Error","remove","setChecked","Boolean","update","$set","checked","setToPrivate"],"mappings":"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","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nexport const Tasks = new Mongo.Collection('tasks');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // Only publish tasks that are public or belong to the current user\n  Meteor.publish('tasks', function tasksPublication() {\n    return Tasks.find({\n      $or: [\n        { private: { $ne: true } },\n        { owner: this.userId },\n      ],\n    });\n  });\n}\n\nMeteor.methods({\n  'tasks.insert'(text) {\n    check(text, String);\n\n    // Make sure the user is logged in before inserting a task\n    /*if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }*/\n    var meteorUser = Meteor.users.findOne(this.userId);\n    var meteorUsername = meteorUser ? meteorUser.username : 'unknown_user'; \n\n    Tasks.insert({\n      text,\n      createdAt: new Date(),\n      owner: this.userId,\n      username: meteorUsername,\n    });\n  },\n  'tasks.remove'(taskId) {\n    check(taskId, String);\n\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== this.userId) {\n      // If the task is private, make sure only the owner can delete it\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.remove(taskId);\n  },\n  'tasks.setChecked'(taskId, setChecked) {\n    check(taskId, String);\n    check(setChecked, Boolean);\n\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== this.userId) {\n      // If the task is private, make sure only the owner can check it off\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, { $set: { checked: setChecked } });\n  },\n  'tasks.setPrivate'(taskId, setToPrivate) {\n    check(taskId, String);\n    check(setToPrivate, Boolean);\n\n    const task = Tasks.findOne(taskId);\n\n    // Make sure only the task owner can make a task private\n    if (task.owner !== this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, { $set: { private: setToPrivate } });\n  },\n});\n","import '../imports/api/tasks.js';\n"]}